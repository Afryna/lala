#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
install.packages("rmarkdown")

library(shiny)
library (data.table)
library (tidyverse)
library(DT)
library (corrplot)

library(wildcard)
library (plotly)
library (ggplot2)
library (PerformanceAnalytics)
#library(shinydashboard)

mydata<-read.csv(file = "https://raw.githubusercontent.com/Afryna/lala/master/2018.csv", stringsAsFactors = TRUE, header = TRUE)
#setwd("C:\Users\afryn\Documents\WhoIsHappy")


#Data import and Cleaning
wh18 <- fread("https://raw.githubusercontent.com/Afryna/lala/master/2018.csv", data.table = FALSE)

wh18$year <- 2018

names(wh18)[1] <- "Happiness Rank"
names(wh18)[2] <- "Country Rank"
names(wh18)[3] <- "Happiness Score"
names(wh18)[6] <- "Healty Life Expectancy"
mydata <- data.matrix(mydata)

names(wh18) <- c("Country", "Happiness_Rank", "Happiness_Score","GDP_Per_Capita","Social_Support","Health_Life_Expectancy","Freedom_To_Make_Life_Choices","Generosity","Perceptions_Of_Corruption","Residual","Year")

head(wh18)
str(wh18)
summary(wh18)




#world <- map_data ('world')
#world <- world %>% filter (region != "Antartica")
#world<-fortify(world)
#happiness_score18 <- wh18 %>% select(Country, Happiness_Score)
#happiness_score18 <- wildcard(df = happiness_score18, wildcard = "United States", values = "USA",
 #                             expand = TRUE, rules = NULL)
#happiness_score18 <- wildcard(df = happiness_score18, wildcard = "United Kingdom", values = "UK",
#                              expand = TRUE, rules = NULL)
#happiness_score18 <- wildcard(df = happiness_score18, wildcard = "Democratic Republic of the Congo", values = "Congo (Kinshasa)",
#                              expand = TRUE, rules = NULL)



#boxplot
names(wh18)[3] <- "Happiness_Score"
ggplot(wh18, aes(x=Region, y= Happiness_Score, colour = Region)) + 
  geom_boxplot() + 
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) + 
  labs(title = "Happiness Score Boxplot",
       x = "Region",
       y = "Happiness Score")

#ggplot() + 
 # geom_map(data=world, map=world,
#           aes(x=long, y=lat, group=group, map_id=region),
  #         fill="white", colour="black") + 
  #geom_map(data=happiness_score18, map=world,
   #        aes(fill=Happiness_Score, map_id=Country),
    #       colour="black") + 
  #scale_fill_continuous(low="red", high="yellow",
   #                     guide="colorbar") + 
  
  #labs(title = "World Happiness Score in 2018")
## Warning: Ignoring unknown aesthetics: x, y

#hist (wh18.Happiness_Score, main = "Histogram of Happiness Score Worldwide in 2018", xlab = "Happiness Score")



#top 5 worst 5
#world_happiness18 <- wh18 #%>% filter(year == 2018)
#top5 <- world_happiness18 %>% head(5) %>% mutate(Level = "TOP5")
#worst5 <- world_happiness18 %>% tail(5) %>% mutate(Level = "WORST5")
#comparison <- bind_rows(top5, worst5)
#comparison$Level <- as.factor(comparison$Level)
#comparison <- transform(comparison, Level = factor(Level, levels = c("TOP5", "WORST5" )))

#datatable(comparison,
       #   options = list(
        #    lengthMenu = c(5, 10, 15)
        #  ),
        #  caption = 
        #    htmltools::tags$caption(
        #      style = 'caption-side: bottom; text-align: center;', 
        #      htmltools::em('Data table that only includes top5 and worst5 countries'))
#)

#dimnames (mydata) = list (c("1","2","3","4","5","6","7"),
                         # c("Southern Asia" = "a","Central and Eastern Europe" = "b","North America" = "c","Southeastern Asia" = "d","Western Europe" = "e","Australia and New Zealand" = "f","Eastern Asia" = "g","Sub-Saharan Africa" = "h"), selected = "a")

fields <- c("text_demo","slider_demo", "submit_demo", "radio_demo", "action_demo")

#saveData <- function(input){
  #put variables in a data frame
 # data <- data.frame(matrix(nrow=1,ncol=0))
  #for (x in fields) {
   # var <- input[[x]]
  #  if (length(var)>1) {
   #   data[[x]] <- list (var)
    #} else {
     # data[[x]] <- var
    #}
  #}
  #data$submit <- submitbutton()
#}



radio_demo <- radioButtons(
  "radio_demo",
  "Do you think your country is a happy country?",
  c("Yes","No"),
  inline = TRUE
)


text_demo <- textInput (
  "text_demo",
  "Which country do you think the happiest?"
)

action_demo <- actionButton(
  "clear",
  "Clear Form"
)


resetForm <- function (session) {
  updateTextInput(session, "text_demo", value = "")
  updateRadioButtons(session, "text_demo", value = "Yes")
  updateSliderInput(session, "slider_demo", value = 50)
}

# Define UI for application that draws a histogram
shinyUI <- fluidPage(
 
  # Application title
  tags$head(
    tags$style(HTML("
                    .shiny-input-container:not(.shiny-input-container-inline){
                    width: 100%;
                    max-width: 100%;
                    }"
     )),
  
  #ggplot() + 
     # geom_#map(data=world, map=world,
             #  aes(x=long, y=lat, group=group, map_id=region),
            #   fill="white", colour="black") + 
     # geom_map(data=happiness_score18, map=world,
         #      aes(fill=Happiness_Score, map_id=Country),
     #     #     colour="black") + 
    #  scale_fill_continuous(low="red", high="yellow",
    #                        guide="colorbar") + 
     # labs(title = "World Happiness Score in 2018"),
    
    
    sidebarLayout(
     
      sidebarPanel(
        selectInput(inputId = "gen",  # Give the input a name "genotype"
                    label = "1. Select a region",  # Give the input a label to be displayed in the app
                    choices = c("Southern Asia" = "a","Central and Eastern Europe" = "b","North America" = "c","Southeastern Asia" = "d","Western Europe" = "e","Australia and New Zealand" = "f","Eastern Asia" = "g","Sub-Saharan Africa" = "h"), selected = "a"),  # Create the choices that can be selected. e.g. Display "A" and link to value "a"
        selectInput(inputId = "colour", 
                    label = "2. Which rank do you want to know?", 
                    choices = c("Top 5","Worst 5"), selected = "Worst 5"),
        sliderInput(inputId = "bin", 
                    label = "3.How would you rank the happines of the country you live in(currently), on a scale from 0-10?",
                    min=0, max=10, value= c(5))
        #textInput(inputId = "text", 
                 # label = "4. Enter some text to be displayed", "")
      ),
      

      
      mainPanel(
        
        #analysis
        corrplot(cor(wh18 %>%
                       select (Happiness_Score:Health_Life_Expectancy)),
                 method = "color",
                 sig.level = 0.01,
                 insig = "blank",
                 addCoef.col = "black",
                 tl.srt = 45,
                 type = "upper"
                 
        )
      )
    ),

  h3("My Survey"),
  p("Please fill out the following brief survey..."),
  
  fluidRow(
    column(width=6, text_demo)
 ),
  
  fluidRow(
   column(width=4, radio_demo)
  ),

  actionButton("submit",  "Submit"),
  action_demo
    )
)


# Define server logic required to draw a histogram
server <- function(input, output, session){
  observeEvent(input$submit,{
    resetForm(session)
    
    #thank user
    n_responses <- length(list.files(outputDir))
    responses <- paste0("Thank you for completing the survey! Stay happy anywhere!",
                        n_responses, ".")
    showNotification(response, duration=0, type = "message")
  })
  observeEvent(input$clear, {
    resetForm(session)
  })

  
  
}
  
# Run the application 
shinyApp(ui= shinyUI, server=server)

